/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shifen.cloud.name.common.thrift.define;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-18")
public class TCloudHost implements org.apache.thrift.TBase<TCloudHost, TCloudHost._Fields>, java.io.Serializable, Cloneable, Comparable<TCloudHost> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCloudHost");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuQuota", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MEM_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("memQuota", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SYSTEM_DISK_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("systemDiskQuota", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HOME_DISK_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("homeDiskQuota", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WAN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("wanIp", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IDC_FIELD_DESC = new org.apache.thrift.protocol.TField("idc", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCloudHostStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCloudHostTupleSchemeFactory());
  }

  public long id; // required
  public String hostname; // required
  public int cpuQuota; // required
  public int memQuota; // required
  public int systemDiskQuota; // required
  public int homeDiskQuota; // required
  public String ip; // required
  public String wanIp; // required
  public String idc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    HOSTNAME((short)2, "hostname"),
    CPU_QUOTA((short)3, "cpuQuota"),
    MEM_QUOTA((short)4, "memQuota"),
    SYSTEM_DISK_QUOTA((short)5, "systemDiskQuota"),
    HOME_DISK_QUOTA((short)6, "homeDiskQuota"),
    IP((short)7, "ip"),
    WAN_IP((short)8, "wanIp"),
    IDC((short)9, "idc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // HOSTNAME
          return HOSTNAME;
        case 3: // CPU_QUOTA
          return CPU_QUOTA;
        case 4: // MEM_QUOTA
          return MEM_QUOTA;
        case 5: // SYSTEM_DISK_QUOTA
          return SYSTEM_DISK_QUOTA;
        case 6: // HOME_DISK_QUOTA
          return HOME_DISK_QUOTA;
        case 7: // IP
          return IP;
        case 8: // WAN_IP
          return WAN_IP;
        case 9: // IDC
          return IDC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CPUQUOTA_ISSET_ID = 1;
  private static final int __MEMQUOTA_ISSET_ID = 2;
  private static final int __SYSTEMDISKQUOTA_ISSET_ID = 3;
  private static final int __HOMEDISKQUOTA_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("cpuQuota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("memQuota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYSTEM_DISK_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("systemDiskQuota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOME_DISK_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("homeDiskQuota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WAN_IP, new org.apache.thrift.meta_data.FieldMetaData("wanIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDC, new org.apache.thrift.meta_data.FieldMetaData("idc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCloudHost.class, metaDataMap);
  }

  public TCloudHost() {
  }

  public TCloudHost(
    long id,
    String hostname,
    int cpuQuota,
    int memQuota,
    int systemDiskQuota,
    int homeDiskQuota,
    String ip,
    String wanIp,
    String idc)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.hostname = hostname;
    this.cpuQuota = cpuQuota;
    setCpuQuotaIsSet(true);
    this.memQuota = memQuota;
    setMemQuotaIsSet(true);
    this.systemDiskQuota = systemDiskQuota;
    setSystemDiskQuotaIsSet(true);
    this.homeDiskQuota = homeDiskQuota;
    setHomeDiskQuotaIsSet(true);
    this.ip = ip;
    this.wanIp = wanIp;
    this.idc = idc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCloudHost(TCloudHost other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    this.cpuQuota = other.cpuQuota;
    this.memQuota = other.memQuota;
    this.systemDiskQuota = other.systemDiskQuota;
    this.homeDiskQuota = other.homeDiskQuota;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetWanIp()) {
      this.wanIp = other.wanIp;
    }
    if (other.isSetIdc()) {
      this.idc = other.idc;
    }
  }

  public TCloudHost deepCopy() {
    return new TCloudHost(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.hostname = null;
    setCpuQuotaIsSet(false);
    this.cpuQuota = 0;
    setMemQuotaIsSet(false);
    this.memQuota = 0;
    setSystemDiskQuotaIsSet(false);
    this.systemDiskQuota = 0;
    setHomeDiskQuotaIsSet(false);
    this.homeDiskQuota = 0;
    this.ip = null;
    this.wanIp = null;
    this.idc = null;
  }

  public long getId() {
    return this.id;
  }

  public TCloudHost setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getHostname() {
    return this.hostname;
  }

  public TCloudHost setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public int getCpuQuota() {
    return this.cpuQuota;
  }

  public TCloudHost setCpuQuota(int cpuQuota) {
    this.cpuQuota = cpuQuota;
    setCpuQuotaIsSet(true);
    return this;
  }

  public void unsetCpuQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPUQUOTA_ISSET_ID);
  }

  /** Returns true if field cpuQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __CPUQUOTA_ISSET_ID);
  }

  public void setCpuQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPUQUOTA_ISSET_ID, value);
  }

  public int getMemQuota() {
    return this.memQuota;
  }

  public TCloudHost setMemQuota(int memQuota) {
    this.memQuota = memQuota;
    setMemQuotaIsSet(true);
    return this;
  }

  public void unsetMemQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMQUOTA_ISSET_ID);
  }

  /** Returns true if field memQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetMemQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMQUOTA_ISSET_ID);
  }

  public void setMemQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMQUOTA_ISSET_ID, value);
  }

  public int getSystemDiskQuota() {
    return this.systemDiskQuota;
  }

  public TCloudHost setSystemDiskQuota(int systemDiskQuota) {
    this.systemDiskQuota = systemDiskQuota;
    setSystemDiskQuotaIsSet(true);
    return this;
  }

  public void unsetSystemDiskQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSTEMDISKQUOTA_ISSET_ID);
  }

  /** Returns true if field systemDiskQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemDiskQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSTEMDISKQUOTA_ISSET_ID);
  }

  public void setSystemDiskQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSTEMDISKQUOTA_ISSET_ID, value);
  }

  public int getHomeDiskQuota() {
    return this.homeDiskQuota;
  }

  public TCloudHost setHomeDiskQuota(int homeDiskQuota) {
    this.homeDiskQuota = homeDiskQuota;
    setHomeDiskQuotaIsSet(true);
    return this;
  }

  public void unsetHomeDiskQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOMEDISKQUOTA_ISSET_ID);
  }

  /** Returns true if field homeDiskQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeDiskQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __HOMEDISKQUOTA_ISSET_ID);
  }

  public void setHomeDiskQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOMEDISKQUOTA_ISSET_ID, value);
  }

  public String getIp() {
    return this.ip;
  }

  public TCloudHost setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getWanIp() {
    return this.wanIp;
  }

  public TCloudHost setWanIp(String wanIp) {
    this.wanIp = wanIp;
    return this;
  }

  public void unsetWanIp() {
    this.wanIp = null;
  }

  /** Returns true if field wanIp is set (has been assigned a value) and false otherwise */
  public boolean isSetWanIp() {
    return this.wanIp != null;
  }

  public void setWanIpIsSet(boolean value) {
    if (!value) {
      this.wanIp = null;
    }
  }

  public String getIdc() {
    return this.idc;
  }

  public TCloudHost setIdc(String idc) {
    this.idc = idc;
    return this;
  }

  public void unsetIdc() {
    this.idc = null;
  }

  /** Returns true if field idc is set (has been assigned a value) and false otherwise */
  public boolean isSetIdc() {
    return this.idc != null;
  }

  public void setIdcIsSet(boolean value) {
    if (!value) {
      this.idc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case CPU_QUOTA:
      if (value == null) {
        unsetCpuQuota();
      } else {
        setCpuQuota((Integer)value);
      }
      break;

    case MEM_QUOTA:
      if (value == null) {
        unsetMemQuota();
      } else {
        setMemQuota((Integer)value);
      }
      break;

    case SYSTEM_DISK_QUOTA:
      if (value == null) {
        unsetSystemDiskQuota();
      } else {
        setSystemDiskQuota((Integer)value);
      }
      break;

    case HOME_DISK_QUOTA:
      if (value == null) {
        unsetHomeDiskQuota();
      } else {
        setHomeDiskQuota((Integer)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case WAN_IP:
      if (value == null) {
        unsetWanIp();
      } else {
        setWanIp((String)value);
      }
      break;

    case IDC:
      if (value == null) {
        unsetIdc();
      } else {
        setIdc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case HOSTNAME:
      return getHostname();

    case CPU_QUOTA:
      return Integer.valueOf(getCpuQuota());

    case MEM_QUOTA:
      return Integer.valueOf(getMemQuota());

    case SYSTEM_DISK_QUOTA:
      return Integer.valueOf(getSystemDiskQuota());

    case HOME_DISK_QUOTA:
      return Integer.valueOf(getHomeDiskQuota());

    case IP:
      return getIp();

    case WAN_IP:
      return getWanIp();

    case IDC:
      return getIdc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case HOSTNAME:
      return isSetHostname();
    case CPU_QUOTA:
      return isSetCpuQuota();
    case MEM_QUOTA:
      return isSetMemQuota();
    case SYSTEM_DISK_QUOTA:
      return isSetSystemDiskQuota();
    case HOME_DISK_QUOTA:
      return isSetHomeDiskQuota();
    case IP:
      return isSetIp();
    case WAN_IP:
      return isSetWanIp();
    case IDC:
      return isSetIdc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCloudHost)
      return this.equals((TCloudHost)that);
    return false;
  }

  public boolean equals(TCloudHost that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_cpuQuota = true;
    boolean that_present_cpuQuota = true;
    if (this_present_cpuQuota || that_present_cpuQuota) {
      if (!(this_present_cpuQuota && that_present_cpuQuota))
        return false;
      if (this.cpuQuota != that.cpuQuota)
        return false;
    }

    boolean this_present_memQuota = true;
    boolean that_present_memQuota = true;
    if (this_present_memQuota || that_present_memQuota) {
      if (!(this_present_memQuota && that_present_memQuota))
        return false;
      if (this.memQuota != that.memQuota)
        return false;
    }

    boolean this_present_systemDiskQuota = true;
    boolean that_present_systemDiskQuota = true;
    if (this_present_systemDiskQuota || that_present_systemDiskQuota) {
      if (!(this_present_systemDiskQuota && that_present_systemDiskQuota))
        return false;
      if (this.systemDiskQuota != that.systemDiskQuota)
        return false;
    }

    boolean this_present_homeDiskQuota = true;
    boolean that_present_homeDiskQuota = true;
    if (this_present_homeDiskQuota || that_present_homeDiskQuota) {
      if (!(this_present_homeDiskQuota && that_present_homeDiskQuota))
        return false;
      if (this.homeDiskQuota != that.homeDiskQuota)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_wanIp = true && this.isSetWanIp();
    boolean that_present_wanIp = true && that.isSetWanIp();
    if (this_present_wanIp || that_present_wanIp) {
      if (!(this_present_wanIp && that_present_wanIp))
        return false;
      if (!this.wanIp.equals(that.wanIp))
        return false;
    }

    boolean this_present_idc = true && this.isSetIdc();
    boolean that_present_idc = true && that.isSetIdc();
    if (this_present_idc || that_present_idc) {
      if (!(this_present_idc && that_present_idc))
        return false;
      if (!this.idc.equals(that.idc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_hostname = true && (isSetHostname());
    list.add(present_hostname);
    if (present_hostname)
      list.add(hostname);

    boolean present_cpuQuota = true;
    list.add(present_cpuQuota);
    if (present_cpuQuota)
      list.add(cpuQuota);

    boolean present_memQuota = true;
    list.add(present_memQuota);
    if (present_memQuota)
      list.add(memQuota);

    boolean present_systemDiskQuota = true;
    list.add(present_systemDiskQuota);
    if (present_systemDiskQuota)
      list.add(systemDiskQuota);

    boolean present_homeDiskQuota = true;
    list.add(present_homeDiskQuota);
    if (present_homeDiskQuota)
      list.add(homeDiskQuota);

    boolean present_ip = true && (isSetIp());
    list.add(present_ip);
    if (present_ip)
      list.add(ip);

    boolean present_wanIp = true && (isSetWanIp());
    list.add(present_wanIp);
    if (present_wanIp)
      list.add(wanIp);

    boolean present_idc = true && (isSetIdc());
    list.add(present_idc);
    if (present_idc)
      list.add(idc);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCloudHost other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuQuota()).compareTo(other.isSetCpuQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuQuota, other.cpuQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemQuota()).compareTo(other.isSetMemQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memQuota, other.memQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemDiskQuota()).compareTo(other.isSetSystemDiskQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemDiskQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemDiskQuota, other.systemDiskQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeDiskQuota()).compareTo(other.isSetHomeDiskQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeDiskQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeDiskQuota, other.homeDiskQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWanIp()).compareTo(other.isSetWanIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWanIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wanIp, other.wanIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdc()).compareTo(other.isSetIdc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idc, other.idc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCloudHost(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuQuota:");
    sb.append(this.cpuQuota);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memQuota:");
    sb.append(this.memQuota);
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemDiskQuota:");
    sb.append(this.systemDiskQuota);
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeDiskQuota:");
    sb.append(this.homeDiskQuota);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wanIp:");
    if (this.wanIp == null) {
      sb.append("null");
    } else {
      sb.append(this.wanIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idc:");
    if (this.idc == null) {
      sb.append("null");
    } else {
      sb.append(this.idc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCloudHostStandardSchemeFactory implements SchemeFactory {
    public TCloudHostStandardScheme getScheme() {
      return new TCloudHostStandardScheme();
    }
  }

  private static class TCloudHostStandardScheme extends StandardScheme<TCloudHost> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCloudHost struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPU_QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuQuota = iprot.readI32();
              struct.setCpuQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEM_QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memQuota = iprot.readI32();
              struct.setMemQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SYSTEM_DISK_QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.systemDiskQuota = iprot.readI32();
              struct.setSystemDiskQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOME_DISK_QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.homeDiskQuota = iprot.readI32();
              struct.setHomeDiskQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WAN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wanIp = iprot.readString();
              struct.setWanIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IDC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idc = iprot.readString();
              struct.setIdcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCloudHost struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPU_QUOTA_FIELD_DESC);
      oprot.writeI32(struct.cpuQuota);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_QUOTA_FIELD_DESC);
      oprot.writeI32(struct.memQuota);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYSTEM_DISK_QUOTA_FIELD_DESC);
      oprot.writeI32(struct.systemDiskQuota);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOME_DISK_QUOTA_FIELD_DESC);
      oprot.writeI32(struct.homeDiskQuota);
      oprot.writeFieldEnd();
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.wanIp != null) {
        oprot.writeFieldBegin(WAN_IP_FIELD_DESC);
        oprot.writeString(struct.wanIp);
        oprot.writeFieldEnd();
      }
      if (struct.idc != null) {
        oprot.writeFieldBegin(IDC_FIELD_DESC);
        oprot.writeString(struct.idc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCloudHostTupleSchemeFactory implements SchemeFactory {
    public TCloudHostTupleScheme getScheme() {
      return new TCloudHostTupleScheme();
    }
  }

  private static class TCloudHostTupleScheme extends TupleScheme<TCloudHost> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCloudHost struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetHostname()) {
        optionals.set(1);
      }
      if (struct.isSetCpuQuota()) {
        optionals.set(2);
      }
      if (struct.isSetMemQuota()) {
        optionals.set(3);
      }
      if (struct.isSetSystemDiskQuota()) {
        optionals.set(4);
      }
      if (struct.isSetHomeDiskQuota()) {
        optionals.set(5);
      }
      if (struct.isSetIp()) {
        optionals.set(6);
      }
      if (struct.isSetWanIp()) {
        optionals.set(7);
      }
      if (struct.isSetIdc()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetCpuQuota()) {
        oprot.writeI32(struct.cpuQuota);
      }
      if (struct.isSetMemQuota()) {
        oprot.writeI32(struct.memQuota);
      }
      if (struct.isSetSystemDiskQuota()) {
        oprot.writeI32(struct.systemDiskQuota);
      }
      if (struct.isSetHomeDiskQuota()) {
        oprot.writeI32(struct.homeDiskQuota);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetWanIp()) {
        oprot.writeString(struct.wanIp);
      }
      if (struct.isSetIdc()) {
        oprot.writeString(struct.idc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCloudHost struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cpuQuota = iprot.readI32();
        struct.setCpuQuotaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.memQuota = iprot.readI32();
        struct.setMemQuotaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.systemDiskQuota = iprot.readI32();
        struct.setSystemDiskQuotaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.homeDiskQuota = iprot.readI32();
        struct.setHomeDiskQuotaIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.wanIp = iprot.readString();
        struct.setWanIpIsSet(true);
      }
      if (incoming.get(8)) {
        struct.idc = iprot.readString();
        struct.setIdcIsSet(true);
      }
    }
  }

}

