/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shifen.cloud.name.common.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-18")
public class TCloudInstanceService {

  public interface Iface {

    /**
     * get
     * 
     * @param serviceName
     */
    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getCloudInstanceByService(String serviceName) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException;

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getCloudInstanceByHost(String host) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException;

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getCloudInstanceByIp(String ip) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException;

    /**
     * update
     * 
     * @param instance
     */
    public int updateInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException;

    public int updateInstanceStatus(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, int status) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException;

    /**
     * add
     * 
     * @param instance
     */
    public int addInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException;

    /**
     * delete
     * 
     * @param instance
     */
    public int deleteInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getCloudInstanceByService(String serviceName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCloudInstanceByHost(String host, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCloudInstanceByIp(String ip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateInstanceStatus(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getCloudInstanceByService(String serviceName) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      send_getCloudInstanceByService(serviceName);
      return recv_getCloudInstanceByService();
    }

    public void send_getCloudInstanceByService(String serviceName) throws org.apache.thrift.TException
    {
      getCloudInstanceByService_args args = new getCloudInstanceByService_args();
      args.setServiceName(serviceName);
      sendBase("getCloudInstanceByService", args);
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> recv_getCloudInstanceByService() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      getCloudInstanceByService_result result = new getCloudInstanceByService_result();
      receiveBase(result, "getCloudInstanceByService");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCloudInstanceByService failed: unknown result");
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getCloudInstanceByHost(String host) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      send_getCloudInstanceByHost(host);
      return recv_getCloudInstanceByHost();
    }

    public void send_getCloudInstanceByHost(String host) throws org.apache.thrift.TException
    {
      getCloudInstanceByHost_args args = new getCloudInstanceByHost_args();
      args.setHost(host);
      sendBase("getCloudInstanceByHost", args);
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> recv_getCloudInstanceByHost() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      getCloudInstanceByHost_result result = new getCloudInstanceByHost_result();
      receiveBase(result, "getCloudInstanceByHost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCloudInstanceByHost failed: unknown result");
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getCloudInstanceByIp(String ip) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      send_getCloudInstanceByIp(ip);
      return recv_getCloudInstanceByIp();
    }

    public void send_getCloudInstanceByIp(String ip) throws org.apache.thrift.TException
    {
      getCloudInstanceByIp_args args = new getCloudInstanceByIp_args();
      args.setIp(ip);
      sendBase("getCloudInstanceByIp", args);
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> recv_getCloudInstanceByIp() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      getCloudInstanceByIp_result result = new getCloudInstanceByIp_result();
      receiveBase(result, "getCloudInstanceByIp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCloudInstanceByIp failed: unknown result");
    }

    public int updateInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      send_updateInstance(instance);
      return recv_updateInstance();
    }

    public void send_updateInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) throws org.apache.thrift.TException
    {
      updateInstance_args args = new updateInstance_args();
      args.setInstance(instance);
      sendBase("updateInstance", args);
    }

    public int recv_updateInstance() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      updateInstance_result result = new updateInstance_result();
      receiveBase(result, "updateInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateInstance failed: unknown result");
    }

    public int updateInstanceStatus(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, int status) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      send_updateInstanceStatus(instance, status);
      return recv_updateInstanceStatus();
    }

    public void send_updateInstanceStatus(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, int status) throws org.apache.thrift.TException
    {
      updateInstanceStatus_args args = new updateInstanceStatus_args();
      args.setInstance(instance);
      args.setStatus(status);
      sendBase("updateInstanceStatus", args);
    }

    public int recv_updateInstanceStatus() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      updateInstanceStatus_result result = new updateInstanceStatus_result();
      receiveBase(result, "updateInstanceStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateInstanceStatus failed: unknown result");
    }

    public int addInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      send_addInstance(instance);
      return recv_addInstance();
    }

    public void send_addInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) throws org.apache.thrift.TException
    {
      addInstance_args args = new addInstance_args();
      args.setInstance(instance);
      sendBase("addInstance", args);
    }

    public int recv_addInstance() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      addInstance_result result = new addInstance_result();
      receiveBase(result, "addInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addInstance failed: unknown result");
    }

    public int deleteInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      send_deleteInstance(instance);
      return recv_deleteInstance();
    }

    public void send_deleteInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) throws org.apache.thrift.TException
    {
      deleteInstance_args args = new deleteInstance_args();
      args.setInstance(instance);
      sendBase("deleteInstance", args);
    }

    public int recv_deleteInstance() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException
    {
      deleteInstance_result result = new deleteInstance_result();
      receiveBase(result, "deleteInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteInstance failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getCloudInstanceByService(String serviceName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCloudInstanceByService_call method_call = new getCloudInstanceByService_call(serviceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCloudInstanceByService_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceName;
      public getCloudInstanceByService_call(String serviceName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceName = serviceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCloudInstanceByService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCloudInstanceByService_args args = new getCloudInstanceByService_args();
        args.setServiceName(serviceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getResult() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCloudInstanceByService();
      }
    }

    public void getCloudInstanceByHost(String host, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCloudInstanceByHost_call method_call = new getCloudInstanceByHost_call(host, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCloudInstanceByHost_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String host;
      public getCloudInstanceByHost_call(String host, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.host = host;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCloudInstanceByHost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCloudInstanceByHost_args args = new getCloudInstanceByHost_args();
        args.setHost(host);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getResult() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCloudInstanceByHost();
      }
    }

    public void getCloudInstanceByIp(String ip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCloudInstanceByIp_call method_call = new getCloudInstanceByIp_call(ip, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCloudInstanceByIp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      public getCloudInstanceByIp_call(String ip, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCloudInstanceByIp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCloudInstanceByIp_args args = new getCloudInstanceByIp_args();
        args.setIp(ip);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getResult() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCloudInstanceByIp();
      }
    }

    public void updateInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateInstance_call method_call = new updateInstance_call(instance, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.shifen.cloud.name.common.thrift.define.TCloudInstance instance;
      public updateInstance_call(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instance = instance;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateInstance_args args = new updateInstance_args();
        args.setInstance(instance);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateInstance();
      }
    }

    public void updateInstanceStatus(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateInstanceStatus_call method_call = new updateInstanceStatus_call(instance, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateInstanceStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.shifen.cloud.name.common.thrift.define.TCloudInstance instance;
      private int status;
      public updateInstanceStatus_call(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instance = instance;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateInstanceStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateInstanceStatus_args args = new updateInstanceStatus_args();
        args.setInstance(instance);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateInstanceStatus();
      }
    }

    public void addInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addInstance_call method_call = new addInstance_call(instance, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.shifen.cloud.name.common.thrift.define.TCloudInstance instance;
      public addInstance_call(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instance = instance;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addInstance_args args = new addInstance_args();
        args.setInstance(instance);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addInstance();
      }
    }

    public void deleteInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteInstance_call method_call = new deleteInstance_call(instance, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.shifen.cloud.name.common.thrift.define.TCloudInstance instance;
      public deleteInstance_call(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instance = instance;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteInstance_args args = new deleteInstance_args();
        args.setInstance(instance);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.shifen.cloud.name.common.thrift.exception.ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteInstance();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getCloudInstanceByService", new getCloudInstanceByService());
      processMap.put("getCloudInstanceByHost", new getCloudInstanceByHost());
      processMap.put("getCloudInstanceByIp", new getCloudInstanceByIp());
      processMap.put("updateInstance", new updateInstance());
      processMap.put("updateInstanceStatus", new updateInstanceStatus());
      processMap.put("addInstance", new addInstance());
      processMap.put("deleteInstance", new deleteInstance());
      return processMap;
    }

    public static class getCloudInstanceByService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCloudInstanceByService_args> {
      public getCloudInstanceByService() {
        super("getCloudInstanceByService");
      }

      public getCloudInstanceByService_args getEmptyArgsInstance() {
        return new getCloudInstanceByService_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCloudInstanceByService_result getResult(I iface, getCloudInstanceByService_args args) throws org.apache.thrift.TException {
        getCloudInstanceByService_result result = new getCloudInstanceByService_result();
        try {
          result.success = iface.getCloudInstanceByService(args.serviceName);
        } catch (com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getCloudInstanceByHost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCloudInstanceByHost_args> {
      public getCloudInstanceByHost() {
        super("getCloudInstanceByHost");
      }

      public getCloudInstanceByHost_args getEmptyArgsInstance() {
        return new getCloudInstanceByHost_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCloudInstanceByHost_result getResult(I iface, getCloudInstanceByHost_args args) throws org.apache.thrift.TException {
        getCloudInstanceByHost_result result = new getCloudInstanceByHost_result();
        try {
          result.success = iface.getCloudInstanceByHost(args.host);
        } catch (com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getCloudInstanceByIp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCloudInstanceByIp_args> {
      public getCloudInstanceByIp() {
        super("getCloudInstanceByIp");
      }

      public getCloudInstanceByIp_args getEmptyArgsInstance() {
        return new getCloudInstanceByIp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCloudInstanceByIp_result getResult(I iface, getCloudInstanceByIp_args args) throws org.apache.thrift.TException {
        getCloudInstanceByIp_result result = new getCloudInstanceByIp_result();
        try {
          result.success = iface.getCloudInstanceByIp(args.ip);
        } catch (com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updateInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateInstance_args> {
      public updateInstance() {
        super("updateInstance");
      }

      public updateInstance_args getEmptyArgsInstance() {
        return new updateInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateInstance_result getResult(I iface, updateInstance_args args) throws org.apache.thrift.TException {
        updateInstance_result result = new updateInstance_result();
        try {
          result.success = iface.updateInstance(args.instance);
          result.setSuccessIsSet(true);
        } catch (com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updateInstanceStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateInstanceStatus_args> {
      public updateInstanceStatus() {
        super("updateInstanceStatus");
      }

      public updateInstanceStatus_args getEmptyArgsInstance() {
        return new updateInstanceStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateInstanceStatus_result getResult(I iface, updateInstanceStatus_args args) throws org.apache.thrift.TException {
        updateInstanceStatus_result result = new updateInstanceStatus_result();
        try {
          result.success = iface.updateInstanceStatus(args.instance, args.status);
          result.setSuccessIsSet(true);
        } catch (com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class addInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addInstance_args> {
      public addInstance() {
        super("addInstance");
      }

      public addInstance_args getEmptyArgsInstance() {
        return new addInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addInstance_result getResult(I iface, addInstance_args args) throws org.apache.thrift.TException {
        addInstance_result result = new addInstance_result();
        try {
          result.success = iface.addInstance(args.instance);
          result.setSuccessIsSet(true);
        } catch (com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class deleteInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteInstance_args> {
      public deleteInstance() {
        super("deleteInstance");
      }

      public deleteInstance_args getEmptyArgsInstance() {
        return new deleteInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteInstance_result getResult(I iface, deleteInstance_args args) throws org.apache.thrift.TException {
        deleteInstance_result result = new deleteInstance_result();
        try {
          result.success = iface.deleteInstance(args.instance);
          result.setSuccessIsSet(true);
        } catch (com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getCloudInstanceByService", new getCloudInstanceByService());
      processMap.put("getCloudInstanceByHost", new getCloudInstanceByHost());
      processMap.put("getCloudInstanceByIp", new getCloudInstanceByIp());
      processMap.put("updateInstance", new updateInstance());
      processMap.put("updateInstanceStatus", new updateInstanceStatus());
      processMap.put("addInstance", new addInstance());
      processMap.put("deleteInstance", new deleteInstance());
      return processMap;
    }

    public static class getCloudInstanceByService<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCloudInstanceByService_args, List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>> {
      public getCloudInstanceByService() {
        super("getCloudInstanceByService");
      }

      public getCloudInstanceByService_args getEmptyArgsInstance() {
        return new getCloudInstanceByService_args();
      }

      public AsyncMethodCallback<List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>>() { 
          public void onComplete(List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> o) {
            getCloudInstanceByService_result result = new getCloudInstanceByService_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCloudInstanceByService_result result = new getCloudInstanceByService_result();
            if (e instanceof com.shifen.cloud.name.common.thrift.exception.ThriftException) {
                        result.ex = (com.shifen.cloud.name.common.thrift.exception.ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCloudInstanceByService_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>> resultHandler) throws TException {
        iface.getCloudInstanceByService(args.serviceName,resultHandler);
      }
    }

    public static class getCloudInstanceByHost<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCloudInstanceByHost_args, List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>> {
      public getCloudInstanceByHost() {
        super("getCloudInstanceByHost");
      }

      public getCloudInstanceByHost_args getEmptyArgsInstance() {
        return new getCloudInstanceByHost_args();
      }

      public AsyncMethodCallback<List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>>() { 
          public void onComplete(List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> o) {
            getCloudInstanceByHost_result result = new getCloudInstanceByHost_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCloudInstanceByHost_result result = new getCloudInstanceByHost_result();
            if (e instanceof com.shifen.cloud.name.common.thrift.exception.ThriftException) {
                        result.ex = (com.shifen.cloud.name.common.thrift.exception.ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCloudInstanceByHost_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>> resultHandler) throws TException {
        iface.getCloudInstanceByHost(args.host,resultHandler);
      }
    }

    public static class getCloudInstanceByIp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCloudInstanceByIp_args, List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>> {
      public getCloudInstanceByIp() {
        super("getCloudInstanceByIp");
      }

      public getCloudInstanceByIp_args getEmptyArgsInstance() {
        return new getCloudInstanceByIp_args();
      }

      public AsyncMethodCallback<List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>>() { 
          public void onComplete(List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> o) {
            getCloudInstanceByIp_result result = new getCloudInstanceByIp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCloudInstanceByIp_result result = new getCloudInstanceByIp_result();
            if (e instanceof com.shifen.cloud.name.common.thrift.exception.ThriftException) {
                        result.ex = (com.shifen.cloud.name.common.thrift.exception.ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCloudInstanceByIp_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>> resultHandler) throws TException {
        iface.getCloudInstanceByIp(args.ip,resultHandler);
      }
    }

    public static class updateInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateInstance_args, Integer> {
      public updateInstance() {
        super("updateInstance");
      }

      public updateInstance_args getEmptyArgsInstance() {
        return new updateInstance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateInstance_result result = new updateInstance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateInstance_result result = new updateInstance_result();
            if (e instanceof com.shifen.cloud.name.common.thrift.exception.ThriftException) {
                        result.ex = (com.shifen.cloud.name.common.thrift.exception.ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateInstance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateInstance(args.instance,resultHandler);
      }
    }

    public static class updateInstanceStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateInstanceStatus_args, Integer> {
      public updateInstanceStatus() {
        super("updateInstanceStatus");
      }

      public updateInstanceStatus_args getEmptyArgsInstance() {
        return new updateInstanceStatus_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateInstanceStatus_result result = new updateInstanceStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateInstanceStatus_result result = new updateInstanceStatus_result();
            if (e instanceof com.shifen.cloud.name.common.thrift.exception.ThriftException) {
                        result.ex = (com.shifen.cloud.name.common.thrift.exception.ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateInstanceStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateInstanceStatus(args.instance, args.status,resultHandler);
      }
    }

    public static class addInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addInstance_args, Integer> {
      public addInstance() {
        super("addInstance");
      }

      public addInstance_args getEmptyArgsInstance() {
        return new addInstance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addInstance_result result = new addInstance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addInstance_result result = new addInstance_result();
            if (e instanceof com.shifen.cloud.name.common.thrift.exception.ThriftException) {
                        result.ex = (com.shifen.cloud.name.common.thrift.exception.ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addInstance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addInstance(args.instance,resultHandler);
      }
    }

    public static class deleteInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteInstance_args, Integer> {
      public deleteInstance() {
        super("deleteInstance");
      }

      public deleteInstance_args getEmptyArgsInstance() {
        return new deleteInstance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteInstance_result result = new deleteInstance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteInstance_result result = new deleteInstance_result();
            if (e instanceof com.shifen.cloud.name.common.thrift.exception.ThriftException) {
                        result.ex = (com.shifen.cloud.name.common.thrift.exception.ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteInstance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteInstance(args.instance,resultHandler);
      }
    }

  }

  public static class getCloudInstanceByService_args implements org.apache.thrift.TBase<getCloudInstanceByService_args, getCloudInstanceByService_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCloudInstanceByService_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCloudInstanceByService_args");

    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCloudInstanceByService_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCloudInstanceByService_argsTupleSchemeFactory());
    }

    public String serviceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_NAME((short)1, "serviceName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_NAME
            return SERVICE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCloudInstanceByService_args.class, metaDataMap);
    }

    public getCloudInstanceByService_args() {
    }

    public getCloudInstanceByService_args(
      String serviceName)
    {
      this();
      this.serviceName = serviceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCloudInstanceByService_args(getCloudInstanceByService_args other) {
      if (other.isSetServiceName()) {
        this.serviceName = other.serviceName;
      }
    }

    public getCloudInstanceByService_args deepCopy() {
      return new getCloudInstanceByService_args(this);
    }

    @Override
    public void clear() {
      this.serviceName = null;
    }

    public String getServiceName() {
      return this.serviceName;
    }

    public getCloudInstanceByService_args setServiceName(String serviceName) {
      this.serviceName = serviceName;
      return this;
    }

    public void unsetServiceName() {
      this.serviceName = null;
    }

    /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceName() {
      return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
      if (!value) {
        this.serviceName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_NAME:
        if (value == null) {
          unsetServiceName();
        } else {
          setServiceName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_NAME:
        return getServiceName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_NAME:
        return isSetServiceName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCloudInstanceByService_args)
        return this.equals((getCloudInstanceByService_args)that);
      return false;
    }

    public boolean equals(getCloudInstanceByService_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceName = true && this.isSetServiceName();
      boolean that_present_serviceName = true && that.isSetServiceName();
      if (this_present_serviceName || that_present_serviceName) {
        if (!(this_present_serviceName && that_present_serviceName))
          return false;
        if (!this.serviceName.equals(that.serviceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_serviceName = true && (isSetServiceName());
      list.add(present_serviceName);
      if (present_serviceName)
        list.add(serviceName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCloudInstanceByService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCloudInstanceByService_args(");
      boolean first = true;

      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCloudInstanceByService_argsStandardSchemeFactory implements SchemeFactory {
      public getCloudInstanceByService_argsStandardScheme getScheme() {
        return new getCloudInstanceByService_argsStandardScheme();
      }
    }

    private static class getCloudInstanceByService_argsStandardScheme extends StandardScheme<getCloudInstanceByService_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCloudInstanceByService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCloudInstanceByService_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceName != null) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCloudInstanceByService_argsTupleSchemeFactory implements SchemeFactory {
      public getCloudInstanceByService_argsTupleScheme getScheme() {
        return new getCloudInstanceByService_argsTupleScheme();
      }
    }

    private static class getCloudInstanceByService_argsTupleScheme extends TupleScheme<getCloudInstanceByService_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServiceName()) {
          oprot.writeString(struct.serviceName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.serviceName = iprot.readString();
          struct.setServiceNameIsSet(true);
        }
      }
    }

  }

  public static class getCloudInstanceByService_result implements org.apache.thrift.TBase<getCloudInstanceByService_result, getCloudInstanceByService_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCloudInstanceByService_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCloudInstanceByService_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCloudInstanceByService_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCloudInstanceByService_resultTupleSchemeFactory());
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> success; // required
    public com.shifen.cloud.name.common.thrift.exception.ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.shifen.cloud.name.common.thrift.define.TCloudInstance.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCloudInstanceByService_result.class, metaDataMap);
    }

    public getCloudInstanceByService_result() {
    }

    public getCloudInstanceByService_result(
      List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> success,
      com.shifen.cloud.name.common.thrift.exception.ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCloudInstanceByService_result(getCloudInstanceByService_result other) {
      if (other.isSetSuccess()) {
        List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> __this__success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>(other.success.size());
        for (com.shifen.cloud.name.common.thrift.define.TCloudInstance other_element : other.success) {
          __this__success.add(new com.shifen.cloud.name.common.thrift.define.TCloudInstance(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException(other.ex);
      }
    }

    public getCloudInstanceByService_result deepCopy() {
      return new getCloudInstanceByService_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.shifen.cloud.name.common.thrift.define.TCloudInstance elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>();
      }
      this.success.add(elem);
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getSuccess() {
      return this.success;
    }

    public getCloudInstanceByService_result setSuccess(List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.shifen.cloud.name.common.thrift.exception.ThriftException getEx() {
      return this.ex;
    }

    public getCloudInstanceByService_result setEx(com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.shifen.cloud.name.common.thrift.exception.ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCloudInstanceByService_result)
        return this.equals((getCloudInstanceByService_result)that);
      return false;
    }

    public boolean equals(getCloudInstanceByService_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCloudInstanceByService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCloudInstanceByService_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCloudInstanceByService_resultStandardSchemeFactory implements SchemeFactory {
      public getCloudInstanceByService_resultStandardScheme getScheme() {
        return new getCloudInstanceByService_resultStandardScheme();
      }
    }

    private static class getCloudInstanceByService_resultStandardScheme extends StandardScheme<getCloudInstanceByService_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCloudInstanceByService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>(_list0.size);
                  com.shifen.cloud.name.common.thrift.define.TCloudInstance _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCloudInstanceByService_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.shifen.cloud.name.common.thrift.define.TCloudInstance _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCloudInstanceByService_resultTupleSchemeFactory implements SchemeFactory {
      public getCloudInstanceByService_resultTupleScheme getScheme() {
        return new getCloudInstanceByService_resultTupleScheme();
      }
    }

    private static class getCloudInstanceByService_resultTupleScheme extends TupleScheme<getCloudInstanceByService_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.shifen.cloud.name.common.thrift.define.TCloudInstance _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>(_list5.size);
            com.shifen.cloud.name.common.thrift.define.TCloudInstance _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getCloudInstanceByHost_args implements org.apache.thrift.TBase<getCloudInstanceByHost_args, getCloudInstanceByHost_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCloudInstanceByHost_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCloudInstanceByHost_args");

    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCloudInstanceByHost_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCloudInstanceByHost_argsTupleSchemeFactory());
    }

    public String host; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST((short)1, "host");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST
            return HOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCloudInstanceByHost_args.class, metaDataMap);
    }

    public getCloudInstanceByHost_args() {
    }

    public getCloudInstanceByHost_args(
      String host)
    {
      this();
      this.host = host;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCloudInstanceByHost_args(getCloudInstanceByHost_args other) {
      if (other.isSetHost()) {
        this.host = other.host;
      }
    }

    public getCloudInstanceByHost_args deepCopy() {
      return new getCloudInstanceByHost_args(this);
    }

    @Override
    public void clear() {
      this.host = null;
    }

    public String getHost() {
      return this.host;
    }

    public getCloudInstanceByHost_args setHost(String host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST:
        return getHost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST:
        return isSetHost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCloudInstanceByHost_args)
        return this.equals((getCloudInstanceByHost_args)that);
      return false;
    }

    public boolean equals(getCloudInstanceByHost_args that) {
      if (that == null)
        return false;

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_host = true && (isSetHost());
      list.add(present_host);
      if (present_host)
        list.add(host);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCloudInstanceByHost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCloudInstanceByHost_args(");
      boolean first = true;

      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCloudInstanceByHost_argsStandardSchemeFactory implements SchemeFactory {
      public getCloudInstanceByHost_argsStandardScheme getScheme() {
        return new getCloudInstanceByHost_argsStandardScheme();
      }
    }

    private static class getCloudInstanceByHost_argsStandardScheme extends StandardScheme<getCloudInstanceByHost_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCloudInstanceByHost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCloudInstanceByHost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCloudInstanceByHost_argsTupleSchemeFactory implements SchemeFactory {
      public getCloudInstanceByHost_argsTupleScheme getScheme() {
        return new getCloudInstanceByHost_argsTupleScheme();
      }
    }

    private static class getCloudInstanceByHost_argsTupleScheme extends TupleScheme<getCloudInstanceByHost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHost()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHost()) {
          oprot.writeString(struct.host);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.host = iprot.readString();
          struct.setHostIsSet(true);
        }
      }
    }

  }

  public static class getCloudInstanceByHost_result implements org.apache.thrift.TBase<getCloudInstanceByHost_result, getCloudInstanceByHost_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCloudInstanceByHost_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCloudInstanceByHost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCloudInstanceByHost_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCloudInstanceByHost_resultTupleSchemeFactory());
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> success; // required
    public com.shifen.cloud.name.common.thrift.exception.ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.shifen.cloud.name.common.thrift.define.TCloudInstance.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCloudInstanceByHost_result.class, metaDataMap);
    }

    public getCloudInstanceByHost_result() {
    }

    public getCloudInstanceByHost_result(
      List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> success,
      com.shifen.cloud.name.common.thrift.exception.ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCloudInstanceByHost_result(getCloudInstanceByHost_result other) {
      if (other.isSetSuccess()) {
        List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> __this__success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>(other.success.size());
        for (com.shifen.cloud.name.common.thrift.define.TCloudInstance other_element : other.success) {
          __this__success.add(new com.shifen.cloud.name.common.thrift.define.TCloudInstance(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException(other.ex);
      }
    }

    public getCloudInstanceByHost_result deepCopy() {
      return new getCloudInstanceByHost_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.shifen.cloud.name.common.thrift.define.TCloudInstance elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>();
      }
      this.success.add(elem);
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getSuccess() {
      return this.success;
    }

    public getCloudInstanceByHost_result setSuccess(List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.shifen.cloud.name.common.thrift.exception.ThriftException getEx() {
      return this.ex;
    }

    public getCloudInstanceByHost_result setEx(com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.shifen.cloud.name.common.thrift.exception.ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCloudInstanceByHost_result)
        return this.equals((getCloudInstanceByHost_result)that);
      return false;
    }

    public boolean equals(getCloudInstanceByHost_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCloudInstanceByHost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCloudInstanceByHost_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCloudInstanceByHost_resultStandardSchemeFactory implements SchemeFactory {
      public getCloudInstanceByHost_resultStandardScheme getScheme() {
        return new getCloudInstanceByHost_resultStandardScheme();
      }
    }

    private static class getCloudInstanceByHost_resultStandardScheme extends StandardScheme<getCloudInstanceByHost_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCloudInstanceByHost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>(_list8.size);
                  com.shifen.cloud.name.common.thrift.define.TCloudInstance _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCloudInstanceByHost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.shifen.cloud.name.common.thrift.define.TCloudInstance _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCloudInstanceByHost_resultTupleSchemeFactory implements SchemeFactory {
      public getCloudInstanceByHost_resultTupleScheme getScheme() {
        return new getCloudInstanceByHost_resultTupleScheme();
      }
    }

    private static class getCloudInstanceByHost_resultTupleScheme extends TupleScheme<getCloudInstanceByHost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.shifen.cloud.name.common.thrift.define.TCloudInstance _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>(_list13.size);
            com.shifen.cloud.name.common.thrift.define.TCloudInstance _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getCloudInstanceByIp_args implements org.apache.thrift.TBase<getCloudInstanceByIp_args, getCloudInstanceByIp_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCloudInstanceByIp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCloudInstanceByIp_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCloudInstanceByIp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCloudInstanceByIp_argsTupleSchemeFactory());
    }

    public String ip; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCloudInstanceByIp_args.class, metaDataMap);
    }

    public getCloudInstanceByIp_args() {
    }

    public getCloudInstanceByIp_args(
      String ip)
    {
      this();
      this.ip = ip;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCloudInstanceByIp_args(getCloudInstanceByIp_args other) {
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
    }

    public getCloudInstanceByIp_args deepCopy() {
      return new getCloudInstanceByIp_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
    }

    public String getIp() {
      return this.ip;
    }

    public getCloudInstanceByIp_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCloudInstanceByIp_args)
        return this.equals((getCloudInstanceByIp_args)that);
      return false;
    }

    public boolean equals(getCloudInstanceByIp_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCloudInstanceByIp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCloudInstanceByIp_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCloudInstanceByIp_argsStandardSchemeFactory implements SchemeFactory {
      public getCloudInstanceByIp_argsStandardScheme getScheme() {
        return new getCloudInstanceByIp_argsStandardScheme();
      }
    }

    private static class getCloudInstanceByIp_argsStandardScheme extends StandardScheme<getCloudInstanceByIp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCloudInstanceByIp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCloudInstanceByIp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCloudInstanceByIp_argsTupleSchemeFactory implements SchemeFactory {
      public getCloudInstanceByIp_argsTupleScheme getScheme() {
        return new getCloudInstanceByIp_argsTupleScheme();
      }
    }

    private static class getCloudInstanceByIp_argsTupleScheme extends TupleScheme<getCloudInstanceByIp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByIp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
      }
    }

  }

  public static class getCloudInstanceByIp_result implements org.apache.thrift.TBase<getCloudInstanceByIp_result, getCloudInstanceByIp_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCloudInstanceByIp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCloudInstanceByIp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCloudInstanceByIp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCloudInstanceByIp_resultTupleSchemeFactory());
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> success; // required
    public com.shifen.cloud.name.common.thrift.exception.ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.shifen.cloud.name.common.thrift.define.TCloudInstance.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCloudInstanceByIp_result.class, metaDataMap);
    }

    public getCloudInstanceByIp_result() {
    }

    public getCloudInstanceByIp_result(
      List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> success,
      com.shifen.cloud.name.common.thrift.exception.ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCloudInstanceByIp_result(getCloudInstanceByIp_result other) {
      if (other.isSetSuccess()) {
        List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> __this__success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>(other.success.size());
        for (com.shifen.cloud.name.common.thrift.define.TCloudInstance other_element : other.success) {
          __this__success.add(new com.shifen.cloud.name.common.thrift.define.TCloudInstance(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException(other.ex);
      }
    }

    public getCloudInstanceByIp_result deepCopy() {
      return new getCloudInstanceByIp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.shifen.cloud.name.common.thrift.define.TCloudInstance elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>();
      }
      this.success.add(elem);
    }

    public List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> getSuccess() {
      return this.success;
    }

    public getCloudInstanceByIp_result setSuccess(List<com.shifen.cloud.name.common.thrift.define.TCloudInstance> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.shifen.cloud.name.common.thrift.exception.ThriftException getEx() {
      return this.ex;
    }

    public getCloudInstanceByIp_result setEx(com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.shifen.cloud.name.common.thrift.define.TCloudInstance>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.shifen.cloud.name.common.thrift.exception.ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCloudInstanceByIp_result)
        return this.equals((getCloudInstanceByIp_result)that);
      return false;
    }

    public boolean equals(getCloudInstanceByIp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCloudInstanceByIp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCloudInstanceByIp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCloudInstanceByIp_resultStandardSchemeFactory implements SchemeFactory {
      public getCloudInstanceByIp_resultStandardScheme getScheme() {
        return new getCloudInstanceByIp_resultStandardScheme();
      }
    }

    private static class getCloudInstanceByIp_resultStandardScheme extends StandardScheme<getCloudInstanceByIp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCloudInstanceByIp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>(_list16.size);
                  com.shifen.cloud.name.common.thrift.define.TCloudInstance _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCloudInstanceByIp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.shifen.cloud.name.common.thrift.define.TCloudInstance _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCloudInstanceByIp_resultTupleSchemeFactory implements SchemeFactory {
      public getCloudInstanceByIp_resultTupleScheme getScheme() {
        return new getCloudInstanceByIp_resultTupleScheme();
      }
    }

    private static class getCloudInstanceByIp_resultTupleScheme extends TupleScheme<getCloudInstanceByIp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.shifen.cloud.name.common.thrift.define.TCloudInstance _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCloudInstanceByIp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.shifen.cloud.name.common.thrift.define.TCloudInstance>(_list21.size);
            com.shifen.cloud.name.common.thrift.define.TCloudInstance _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class updateInstance_args implements org.apache.thrift.TBase<updateInstance_args, updateInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInstance_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("instance", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInstance_argsTupleSchemeFactory());
    }

    public com.shifen.cloud.name.common.thrift.define.TCloudInstance instance; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE((short)1, "instance");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE
            return INSTANCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("instance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.shifen.cloud.name.common.thrift.define.TCloudInstance.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInstance_args.class, metaDataMap);
    }

    public updateInstance_args() {
    }

    public updateInstance_args(
      com.shifen.cloud.name.common.thrift.define.TCloudInstance instance)
    {
      this();
      this.instance = instance;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInstance_args(updateInstance_args other) {
      if (other.isSetInstance()) {
        this.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance(other.instance);
      }
    }

    public updateInstance_args deepCopy() {
      return new updateInstance_args(this);
    }

    @Override
    public void clear() {
      this.instance = null;
    }

    public com.shifen.cloud.name.common.thrift.define.TCloudInstance getInstance() {
      return this.instance;
    }

    public updateInstance_args setInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) {
      this.instance = instance;
      return this;
    }

    public void unsetInstance() {
      this.instance = null;
    }

    /** Returns true if field instance is set (has been assigned a value) and false otherwise */
    public boolean isSetInstance() {
      return this.instance != null;
    }

    public void setInstanceIsSet(boolean value) {
      if (!value) {
        this.instance = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTANCE:
        if (value == null) {
          unsetInstance();
        } else {
          setInstance((com.shifen.cloud.name.common.thrift.define.TCloudInstance)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE:
        return getInstance();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE:
        return isSetInstance();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInstance_args)
        return this.equals((updateInstance_args)that);
      return false;
    }

    public boolean equals(updateInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_instance = true && this.isSetInstance();
      boolean that_present_instance = true && that.isSetInstance();
      if (this_present_instance || that_present_instance) {
        if (!(this_present_instance && that_present_instance))
          return false;
        if (!this.instance.equals(that.instance))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_instance = true && (isSetInstance());
      list.add(present_instance);
      if (present_instance)
        list.add(instance);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInstance()).compareTo(other.isSetInstance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instance, other.instance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInstance_args(");
      boolean first = true;

      sb.append("instance:");
      if (this.instance == null) {
        sb.append("null");
      } else {
        sb.append(this.instance);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instance != null) {
        instance.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInstance_argsStandardSchemeFactory implements SchemeFactory {
      public updateInstance_argsStandardScheme getScheme() {
        return new updateInstance_argsStandardScheme();
      }
    }

    private static class updateInstance_argsStandardScheme extends StandardScheme<updateInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
                struct.instance.read(iprot);
                struct.setInstanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instance != null) {
          oprot.writeFieldBegin(INSTANCE_FIELD_DESC);
          struct.instance.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInstance_argsTupleSchemeFactory implements SchemeFactory {
      public updateInstance_argsTupleScheme getScheme() {
        return new updateInstance_argsTupleScheme();
      }
    }

    private static class updateInstance_argsTupleScheme extends TupleScheme<updateInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstance()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstance()) {
          struct.instance.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
          struct.instance.read(iprot);
          struct.setInstanceIsSet(true);
        }
      }
    }

  }

  public static class updateInstance_result implements org.apache.thrift.TBase<updateInstance_result, updateInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInstance_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.shifen.cloud.name.common.thrift.exception.ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInstance_result.class, metaDataMap);
    }

    public updateInstance_result() {
    }

    public updateInstance_result(
      int success,
      com.shifen.cloud.name.common.thrift.exception.ThriftException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInstance_result(updateInstance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException(other.ex);
      }
    }

    public updateInstance_result deepCopy() {
      return new updateInstance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateInstance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.shifen.cloud.name.common.thrift.exception.ThriftException getEx() {
      return this.ex;
    }

    public updateInstance_result setEx(com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.shifen.cloud.name.common.thrift.exception.ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInstance_result)
        return this.equals((updateInstance_result)that);
      return false;
    }

    public boolean equals(updateInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInstance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInstance_resultStandardSchemeFactory implements SchemeFactory {
      public updateInstance_resultStandardScheme getScheme() {
        return new updateInstance_resultStandardScheme();
      }
    }

    private static class updateInstance_resultStandardScheme extends StandardScheme<updateInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInstance_resultTupleSchemeFactory implements SchemeFactory {
      public updateInstance_resultTupleScheme getScheme() {
        return new updateInstance_resultTupleScheme();
      }
    }

    private static class updateInstance_resultTupleScheme extends TupleScheme<updateInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class updateInstanceStatus_args implements org.apache.thrift.TBase<updateInstanceStatus_args, updateInstanceStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateInstanceStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInstanceStatus_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("instance", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInstanceStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInstanceStatus_argsTupleSchemeFactory());
    }

    public com.shifen.cloud.name.common.thrift.define.TCloudInstance instance; // required
    public int status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE((short)1, "instance"),
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE
            return INSTANCE;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("instance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.shifen.cloud.name.common.thrift.define.TCloudInstance.class)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInstanceStatus_args.class, metaDataMap);
    }

    public updateInstanceStatus_args() {
    }

    public updateInstanceStatus_args(
      com.shifen.cloud.name.common.thrift.define.TCloudInstance instance,
      int status)
    {
      this();
      this.instance = instance;
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInstanceStatus_args(updateInstanceStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInstance()) {
        this.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance(other.instance);
      }
      this.status = other.status;
    }

    public updateInstanceStatus_args deepCopy() {
      return new updateInstanceStatus_args(this);
    }

    @Override
    public void clear() {
      this.instance = null;
      setStatusIsSet(false);
      this.status = 0;
    }

    public com.shifen.cloud.name.common.thrift.define.TCloudInstance getInstance() {
      return this.instance;
    }

    public updateInstanceStatus_args setInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) {
      this.instance = instance;
      return this;
    }

    public void unsetInstance() {
      this.instance = null;
    }

    /** Returns true if field instance is set (has been assigned a value) and false otherwise */
    public boolean isSetInstance() {
      return this.instance != null;
    }

    public void setInstanceIsSet(boolean value) {
      if (!value) {
        this.instance = null;
      }
    }

    public int getStatus() {
      return this.status;
    }

    public updateInstanceStatus_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTANCE:
        if (value == null) {
          unsetInstance();
        } else {
          setInstance((com.shifen.cloud.name.common.thrift.define.TCloudInstance)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE:
        return getInstance();

      case STATUS:
        return Integer.valueOf(getStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE:
        return isSetInstance();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInstanceStatus_args)
        return this.equals((updateInstanceStatus_args)that);
      return false;
    }

    public boolean equals(updateInstanceStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_instance = true && this.isSetInstance();
      boolean that_present_instance = true && that.isSetInstance();
      if (this_present_instance || that_present_instance) {
        if (!(this_present_instance && that_present_instance))
          return false;
        if (!this.instance.equals(that.instance))
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_instance = true && (isSetInstance());
      list.add(present_instance);
      if (present_instance)
        list.add(instance);

      boolean present_status = true;
      list.add(present_status);
      if (present_status)
        list.add(status);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateInstanceStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInstance()).compareTo(other.isSetInstance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instance, other.instance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInstanceStatus_args(");
      boolean first = true;

      sb.append("instance:");
      if (this.instance == null) {
        sb.append("null");
      } else {
        sb.append(this.instance);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instance != null) {
        instance.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInstanceStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateInstanceStatus_argsStandardScheme getScheme() {
        return new updateInstanceStatus_argsStandardScheme();
      }
    }

    private static class updateInstanceStatus_argsStandardScheme extends StandardScheme<updateInstanceStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInstanceStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
                struct.instance.read(iprot);
                struct.setInstanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInstanceStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instance != null) {
          oprot.writeFieldBegin(INSTANCE_FIELD_DESC);
          struct.instance.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInstanceStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateInstanceStatus_argsTupleScheme getScheme() {
        return new updateInstanceStatus_argsTupleScheme();
      }
    }

    private static class updateInstanceStatus_argsTupleScheme extends TupleScheme<updateInstanceStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInstanceStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstance()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstance()) {
          struct.instance.write(oprot);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInstanceStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
          struct.instance.read(iprot);
          struct.setInstanceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateInstanceStatus_result implements org.apache.thrift.TBase<updateInstanceStatus_result, updateInstanceStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateInstanceStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInstanceStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInstanceStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInstanceStatus_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.shifen.cloud.name.common.thrift.exception.ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInstanceStatus_result.class, metaDataMap);
    }

    public updateInstanceStatus_result() {
    }

    public updateInstanceStatus_result(
      int success,
      com.shifen.cloud.name.common.thrift.exception.ThriftException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInstanceStatus_result(updateInstanceStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException(other.ex);
      }
    }

    public updateInstanceStatus_result deepCopy() {
      return new updateInstanceStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateInstanceStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.shifen.cloud.name.common.thrift.exception.ThriftException getEx() {
      return this.ex;
    }

    public updateInstanceStatus_result setEx(com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.shifen.cloud.name.common.thrift.exception.ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInstanceStatus_result)
        return this.equals((updateInstanceStatus_result)that);
      return false;
    }

    public boolean equals(updateInstanceStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateInstanceStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInstanceStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInstanceStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateInstanceStatus_resultStandardScheme getScheme() {
        return new updateInstanceStatus_resultStandardScheme();
      }
    }

    private static class updateInstanceStatus_resultStandardScheme extends StandardScheme<updateInstanceStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInstanceStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInstanceStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInstanceStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateInstanceStatus_resultTupleScheme getScheme() {
        return new updateInstanceStatus_resultTupleScheme();
      }
    }

    private static class updateInstanceStatus_resultTupleScheme extends TupleScheme<updateInstanceStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInstanceStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInstanceStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class addInstance_args implements org.apache.thrift.TBase<addInstance_args, addInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<addInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addInstance_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("instance", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addInstance_argsTupleSchemeFactory());
    }

    public com.shifen.cloud.name.common.thrift.define.TCloudInstance instance; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE((short)1, "instance");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE
            return INSTANCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("instance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.shifen.cloud.name.common.thrift.define.TCloudInstance.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addInstance_args.class, metaDataMap);
    }

    public addInstance_args() {
    }

    public addInstance_args(
      com.shifen.cloud.name.common.thrift.define.TCloudInstance instance)
    {
      this();
      this.instance = instance;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addInstance_args(addInstance_args other) {
      if (other.isSetInstance()) {
        this.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance(other.instance);
      }
    }

    public addInstance_args deepCopy() {
      return new addInstance_args(this);
    }

    @Override
    public void clear() {
      this.instance = null;
    }

    public com.shifen.cloud.name.common.thrift.define.TCloudInstance getInstance() {
      return this.instance;
    }

    public addInstance_args setInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) {
      this.instance = instance;
      return this;
    }

    public void unsetInstance() {
      this.instance = null;
    }

    /** Returns true if field instance is set (has been assigned a value) and false otherwise */
    public boolean isSetInstance() {
      return this.instance != null;
    }

    public void setInstanceIsSet(boolean value) {
      if (!value) {
        this.instance = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTANCE:
        if (value == null) {
          unsetInstance();
        } else {
          setInstance((com.shifen.cloud.name.common.thrift.define.TCloudInstance)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE:
        return getInstance();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE:
        return isSetInstance();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addInstance_args)
        return this.equals((addInstance_args)that);
      return false;
    }

    public boolean equals(addInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_instance = true && this.isSetInstance();
      boolean that_present_instance = true && that.isSetInstance();
      if (this_present_instance || that_present_instance) {
        if (!(this_present_instance && that_present_instance))
          return false;
        if (!this.instance.equals(that.instance))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_instance = true && (isSetInstance());
      list.add(present_instance);
      if (present_instance)
        list.add(instance);

      return list.hashCode();
    }

    @Override
    public int compareTo(addInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInstance()).compareTo(other.isSetInstance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instance, other.instance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addInstance_args(");
      boolean first = true;

      sb.append("instance:");
      if (this.instance == null) {
        sb.append("null");
      } else {
        sb.append(this.instance);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instance != null) {
        instance.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addInstance_argsStandardSchemeFactory implements SchemeFactory {
      public addInstance_argsStandardScheme getScheme() {
        return new addInstance_argsStandardScheme();
      }
    }

    private static class addInstance_argsStandardScheme extends StandardScheme<addInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
                struct.instance.read(iprot);
                struct.setInstanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instance != null) {
          oprot.writeFieldBegin(INSTANCE_FIELD_DESC);
          struct.instance.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addInstance_argsTupleSchemeFactory implements SchemeFactory {
      public addInstance_argsTupleScheme getScheme() {
        return new addInstance_argsTupleScheme();
      }
    }

    private static class addInstance_argsTupleScheme extends TupleScheme<addInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstance()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstance()) {
          struct.instance.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
          struct.instance.read(iprot);
          struct.setInstanceIsSet(true);
        }
      }
    }

  }

  public static class addInstance_result implements org.apache.thrift.TBase<addInstance_result, addInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<addInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addInstance_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.shifen.cloud.name.common.thrift.exception.ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addInstance_result.class, metaDataMap);
    }

    public addInstance_result() {
    }

    public addInstance_result(
      int success,
      com.shifen.cloud.name.common.thrift.exception.ThriftException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addInstance_result(addInstance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException(other.ex);
      }
    }

    public addInstance_result deepCopy() {
      return new addInstance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addInstance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.shifen.cloud.name.common.thrift.exception.ThriftException getEx() {
      return this.ex;
    }

    public addInstance_result setEx(com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.shifen.cloud.name.common.thrift.exception.ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addInstance_result)
        return this.equals((addInstance_result)that);
      return false;
    }

    public boolean equals(addInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(addInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addInstance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addInstance_resultStandardSchemeFactory implements SchemeFactory {
      public addInstance_resultStandardScheme getScheme() {
        return new addInstance_resultStandardScheme();
      }
    }

    private static class addInstance_resultStandardScheme extends StandardScheme<addInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addInstance_resultTupleSchemeFactory implements SchemeFactory {
      public addInstance_resultTupleScheme getScheme() {
        return new addInstance_resultTupleScheme();
      }
    }

    private static class addInstance_resultTupleScheme extends TupleScheme<addInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class deleteInstance_args implements org.apache.thrift.TBase<deleteInstance_args, deleteInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteInstance_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("instance", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteInstance_argsTupleSchemeFactory());
    }

    public com.shifen.cloud.name.common.thrift.define.TCloudInstance instance; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE((short)1, "instance");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE
            return INSTANCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("instance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.shifen.cloud.name.common.thrift.define.TCloudInstance.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteInstance_args.class, metaDataMap);
    }

    public deleteInstance_args() {
    }

    public deleteInstance_args(
      com.shifen.cloud.name.common.thrift.define.TCloudInstance instance)
    {
      this();
      this.instance = instance;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteInstance_args(deleteInstance_args other) {
      if (other.isSetInstance()) {
        this.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance(other.instance);
      }
    }

    public deleteInstance_args deepCopy() {
      return new deleteInstance_args(this);
    }

    @Override
    public void clear() {
      this.instance = null;
    }

    public com.shifen.cloud.name.common.thrift.define.TCloudInstance getInstance() {
      return this.instance;
    }

    public deleteInstance_args setInstance(com.shifen.cloud.name.common.thrift.define.TCloudInstance instance) {
      this.instance = instance;
      return this;
    }

    public void unsetInstance() {
      this.instance = null;
    }

    /** Returns true if field instance is set (has been assigned a value) and false otherwise */
    public boolean isSetInstance() {
      return this.instance != null;
    }

    public void setInstanceIsSet(boolean value) {
      if (!value) {
        this.instance = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTANCE:
        if (value == null) {
          unsetInstance();
        } else {
          setInstance((com.shifen.cloud.name.common.thrift.define.TCloudInstance)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE:
        return getInstance();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE:
        return isSetInstance();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteInstance_args)
        return this.equals((deleteInstance_args)that);
      return false;
    }

    public boolean equals(deleteInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_instance = true && this.isSetInstance();
      boolean that_present_instance = true && that.isSetInstance();
      if (this_present_instance || that_present_instance) {
        if (!(this_present_instance && that_present_instance))
          return false;
        if (!this.instance.equals(that.instance))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_instance = true && (isSetInstance());
      list.add(present_instance);
      if (present_instance)
        list.add(instance);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInstance()).compareTo(other.isSetInstance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instance, other.instance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteInstance_args(");
      boolean first = true;

      sb.append("instance:");
      if (this.instance == null) {
        sb.append("null");
      } else {
        sb.append(this.instance);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instance != null) {
        instance.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteInstance_argsStandardSchemeFactory implements SchemeFactory {
      public deleteInstance_argsStandardScheme getScheme() {
        return new deleteInstance_argsStandardScheme();
      }
    }

    private static class deleteInstance_argsStandardScheme extends StandardScheme<deleteInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
                struct.instance.read(iprot);
                struct.setInstanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instance != null) {
          oprot.writeFieldBegin(INSTANCE_FIELD_DESC);
          struct.instance.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteInstance_argsTupleSchemeFactory implements SchemeFactory {
      public deleteInstance_argsTupleScheme getScheme() {
        return new deleteInstance_argsTupleScheme();
      }
    }

    private static class deleteInstance_argsTupleScheme extends TupleScheme<deleteInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstance()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstance()) {
          struct.instance.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instance = new com.shifen.cloud.name.common.thrift.define.TCloudInstance();
          struct.instance.read(iprot);
          struct.setInstanceIsSet(true);
        }
      }
    }

  }

  public static class deleteInstance_result implements org.apache.thrift.TBase<deleteInstance_result, deleteInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteInstance_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.shifen.cloud.name.common.thrift.exception.ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteInstance_result.class, metaDataMap);
    }

    public deleteInstance_result() {
    }

    public deleteInstance_result(
      int success,
      com.shifen.cloud.name.common.thrift.exception.ThriftException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteInstance_result(deleteInstance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException(other.ex);
      }
    }

    public deleteInstance_result deepCopy() {
      return new deleteInstance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteInstance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.shifen.cloud.name.common.thrift.exception.ThriftException getEx() {
      return this.ex;
    }

    public deleteInstance_result setEx(com.shifen.cloud.name.common.thrift.exception.ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.shifen.cloud.name.common.thrift.exception.ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteInstance_result)
        return this.equals((deleteInstance_result)that);
      return false;
    }

    public boolean equals(deleteInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteInstance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteInstance_resultStandardSchemeFactory implements SchemeFactory {
      public deleteInstance_resultStandardScheme getScheme() {
        return new deleteInstance_resultStandardScheme();
      }
    }

    private static class deleteInstance_resultStandardScheme extends StandardScheme<deleteInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteInstance_resultTupleSchemeFactory implements SchemeFactory {
      public deleteInstance_resultTupleScheme getScheme() {
        return new deleteInstance_resultTupleScheme();
      }
    }

    private static class deleteInstance_resultTupleScheme extends TupleScheme<deleteInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.shifen.cloud.name.common.thrift.exception.ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
